upstream authService
{
    server auth-service:8000 max_fails=300;
    keepalive 512;
}

upstream userService
{
    server user-service:8000 max_fails=300;
    keepalive 512;
}

upstream storeService
{
    server store-service:8000 max_fails=300;
    keepalive 512;
}

upstream orderService
{
    server order-service:8000 max_fails=300;
    keepalive 512;
}

upstream tgService
{
    server tg-service:8000 max_fails=300;
    keepalive 512;
}

upstream s3Storage
{
    server store-s3:9000 max_fails=300;
    keepalive 512;
}

upstream frontend
{
    server web-frontend:3000 max_fails=300;
    keepalive 512;
}

map $request_method$request_uri $require_auth
{
    default 0;

    ~^PATCH/api/users/edit$ 1;
    ~^PATCH/api/users/edit-pass$ 1;
    ~^GET/api/users/me$ 1;
    ~^POST/api/users/seller-status$ 1;
    ~^PATCH/api/users/social-links/vk$ 1;
    ~^DELETE/api/users/social-links/vk$ 1;
    ~^PATCH/api/users/social-links/tg$ 1;
    ~^DELETE/api/users/social-links/tg$ 1;

    ~^POST/api/stores$ 1;
    ~^GET/api/stores/my$ 1;
    ~^PATCH/api/stores/[^/]+$ 1;
    ~^PUT/api/stores/[^/]+/logo$ 1;

    ~^POST/api/products(\?[^/]*)?$ 1;
    ~^PATCH/api/products/[^/]+$ 1;
    ~^PUT/api/products/[^/]+/logo$ 1;

    ~^POST/api/tg/activity$ 1;
    ~^DELETE/api/tg/activity$ 1;
    ~^PATCH/api/tg/activity$ 1;
    ~^GET/api/tg/activity/subscriptions$ 1;
    ~^POST/api/tg/activity/[^/]+/unsubscribe$ 1;
    ~^GET/api/tg/activity/[^/]+/subscribe$ 1;
    ~^POST/api/tg/activity/[^/]+/subscribe$ 1;

    ~^POST/api/orders$ 1;
    ~^GET/api/orders/active(\?[^/]*)?$ 1;
    ~^GET/api/orders/archive(\?[^/]*)?$ 1;
    ~^GET/api/orders/[^/]+$ 1;
    ~^PATCH/api/orders/[^/]+/status$ 1;

    ~^GET/api/balances(\?[^/]*)?$ 1;
}

server
{
    listen 80;
    listen [::]:80;
    server_name localhost;

    add_header Access-Control-Allow-Origin * always;
    add_header Access-Control-Allow-Methods "GET, POST, PATCH, PUT, DELETE, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Authorization, Content-Type, withCredentials" always;
    add_header Access-Control-Allow-Credentials true always;

    if ($request_method = OPTIONS)
    {
        return 204;
    }

    location /
    {
        proxy_pass http://frontend;
    }

    location /api/auth
    {
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_pass http://authService/auth;
    }

    location /api/users
    {
        auth_request auth-validate;
        auth_request_set $auth_status $upstream_status;
        proxy_pass http://userService/users;
    }

    location /api/stores
    {
        auth_request auth-validate;
        auth_request_set $auth_status $upstream_status;
        proxy_pass http://storeService/stores;
    }

    location /api/products
    {
        auth_request auth-validate;
        auth_request_set $auth_status $upstream_status;
        proxy_pass http://storeService/products;
    }

    location /api/balances
    {
        auth_request auth-validate;
        auth_request_set $auth_status $upstream_status;
        proxy_pass http://orderService/balances;
    }

    location /api/orders
    {
        auth_request auth-validate;
        auth_request_set $auth_status $upstream_status;
        proxy_pass http://orderService/orders;
    }

    location /api/tg
    {
        auth_request auth-validate;
        auth_request_set $auth_status $upstream_status;
        proxy_pass http://tgService/tg;
    }

    location /s3/
    {
        proxy_pass http://s3Storage/;
    }

    location /admin
    {
        proxy_set_header Host $host;
        proxy_pass http://userService;
    }

    location @unauthorized
    {
        add_header Content-Type text/plain;
        return 401 'Unauthorized';
    }

    location auth-validate
    {
        internal;
        if ($require_auth = 0)
        {
            return 200;
        }
        proxy_method POST;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_pass http://authService/auth/validate;
    }
}
