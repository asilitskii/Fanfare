{"openapi": "3.1.0", "info": {"title": "FastAPI", "version": "0.1.0"}, "paths": {"/auth/login": {"post": {"summary": "Login", "description": "Authenticate user with email and password: returns access and refresh tokens.", "operationId": "post_login", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/LoginFormModel"}}}, "required": true}, "responses": {"200": {"description": "Successful authentication", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TokensResponseModel"}}}}, "400": {"description": "Incorrect email or password (user with this email and this password doesn't exist)", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DetailResponseModel"}, "example": {"detail": "incorrect email or password"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/auth/logout": {"post": {"summary": "Logout", "description": "Accepts both access and refresh tokens and if they are valid, marks them as black-listed (separately).", "operationId": "post_logout", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RefreshTokenBodyModel"}}}, "required": true}, "responses": {"200": {"description": "Successful logout", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DetailResponseModel"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/auth/refresh": {"post": {"summary": "Refresh", "description": "Uses refresh token to get new access and refresh tokens. Marks old refresh token as black-listed until it expires.", "operationId": "post_refresh", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RefreshTokenBodyModel"}}}, "required": true}, "responses": {"200": {"description": "Successful refresh", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TokensResponseModel"}}}}, "401": {"description": "Refresh token is invalid", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DetailResponseModel"}, "example": {"detail": "refresh token expired"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/auth/validate": {"post": {"summary": "Validate", "description": "Validates access token in request.", "operationId": "post_validate", "responses": {"200": {"description": "Access token is valid", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DetailResponseModel"}}}}, "401": {"description": "Access token is invalid", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DetailResponseModel"}, "example": {"detail": "invalid signature"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/auth/blacklist/access": {"post": {"tags": ["internal"], "summary": "Blacklist Access Token", "description": "Puts access token to blacklist if it was valid.", "operationId": "post_blacklist_access_token", "responses": {"200": {"description": "Access token is put to blacklist", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DetailResponseModel"}}}}, "401": {"description": "Access token is invalid", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DetailResponseModel"}, "example": {"detail": "invalid signature"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}}, "components": {"schemas": {"DetailResponseModel": {"properties": {"detail": {"type": "string", "title": "Detail"}}, "type": "object", "required": ["detail"], "title": "DetailResponseModel"}, "HTTPValidationError": {"properties": {"detail": {"items": {"$ref": "#/components/schemas/ValidationError"}, "type": "array", "title": "Detail"}}, "type": "object", "title": "HTTPValidationError"}, "LoginFormModel": {"properties": {"email": {"type": "string", "format": "email", "title": "Email"}, "password": {"type": "string", "maxLength": 64, "minLength": 8, "title": "Password", "description": "must contain at least one digit, at least one capital character and include only next characters: a-zA-Z0-9^_=!#$%&()*+-.:'/?@\\\"`~<>;{},[\\]|"}}, "type": "object", "required": ["email", "password"], "title": "LoginFormModel"}, "RefreshTokenBodyModel": {"properties": {"refresh_token": {"type": "string", "title": "Refresh Token"}}, "type": "object", "required": ["refresh_token"], "title": "RefreshTokenBodyModel"}, "TokensResponseModel": {"properties": {"detail": {"type": "string", "title": "Detail"}, "access_token": {"type": "string", "title": "Access Token"}, "refresh_token": {"type": "string", "title": "Refresh Token"}}, "type": "object", "required": ["detail", "access_token", "refresh_token"], "title": "TokensResponseModel"}, "ValidationError": {"properties": {"loc": {"items": {"anyOf": [{"type": "string"}, {"type": "integer"}]}, "type": "array", "title": "Location"}, "msg": {"type": "string", "title": "Message"}, "type": {"type": "string", "title": "Error Type"}}, "type": "object", "required": ["loc", "msg", "type"], "title": "ValidationError"}}, "securitySchemes": {"OAuth2PasswordBearer": {"type": "oauth2", "flows": {"password": {"scopes": {}, "tokenUrl": "/login"}}}}}}